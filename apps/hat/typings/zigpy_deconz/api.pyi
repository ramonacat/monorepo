"""
This type stub file was generated by pyright.
"""

import sys
import zigpy_deconz.types as t
from typing import Any, Callable
from zigpy.types import KeyData, Struct
from zigpy.zdo.types import SimpleDescriptor

"""deCONZ serial protocol API."""
if sys.version_info[: 2] < (3, 11):
    ...
else:
    ...
LOGGER = ...
MISMATCHED_RESPONSE_TIMEOUT = ...
COMMAND_TIMEOUT = ...
PROBE_TIMEOUT = ...
REQUEST_RETRY_DELAYS = ...
FRAME_LENGTH = ...
PAYLOAD_LENGTH = ...
class Status(t.enum8):
    SUCCESS = ...
    FAILURE = ...
    BUSY = ...
    TIMEOUT = ...
    UNSUPPORTED = ...
    ERROR = ...
    NO_NETWORK = ...
    INVALID_VALUE = ...


class NetworkState2(t.enum2):
    OFFLINE = ...
    JOINING = ...
    CONNECTED = ...
    LEAVING = ...


class DeviceStateFlags(t.bitmap6):
    APSDE_DATA_CONFIRM = ...
    APSDE_DATA_INDICATION = ...
    CONF_CHANGED = ...
    APSDE_DATA_REQUEST_FREE_SLOTS_AVAILABLE = ...


class DeviceState(t.Struct):
    network_state: NetworkState2
    device_state: DeviceStateFlags
    ...


class FirmwarePlatform(t.enum8):
    Conbee = ...
    Conbee_II = ...
    Conbee_III = ...


class FirmwareVersion(t.Struct, t.uint32_t):
    reserved: t.uint8_t
    platform: FirmwarePlatform
    minor: t.uint8_t
    major: t.uint8_t
    ...


class NetworkState(t.enum8):
    OFFLINE = ...
    JOINING = ...
    CONNECTED = ...
    LEAVING = ...


class SecurityMode(t.enum8):
    NO_SECURITY = ...
    PRECONFIGURED_NETWORK_KEY = ...
    NETWORK_KEY_FROM_TC = ...
    ONLY_TCLK = ...


class ZDPResponseHandling(t.bitmap16):
    NONE = ...
    NodeDescRsp = ...


class CommandId(t.enum8):
    aps_data_confirm = ...
    device_state = ...
    change_network_state = ...
    read_parameter = ...
    write_parameter = ...
    version = ...
    device_state_changed = ...
    aps_data_request = ...
    aps_data_indication = ...
    zigbee_green_power = ...
    mac_poll = ...
    update_neighbor = ...
    mac_beacon_indication = ...


class TXStatus(t.enum8):
    SUCCESS = ...


class NetworkParameter(t.enum8):
    mac_address = ...
    nwk_panid = ...
    nwk_address = ...
    nwk_extended_panid = ...
    aps_designed_coordinator = ...
    channel_mask = ...
    aps_extended_panid = ...
    trust_center_address = ...
    security_mode = ...
    configure_endpoint = ...
    use_predefined_nwk_panid = ...
    network_key = ...
    link_key = ...
    current_channel = ...
    permit_join = ...
    protocol_version = ...
    nwk_update_id = ...
    watchdog_ttl = ...
    nwk_frame_counter = ...
    app_zdp_response_handling = ...


class IndexedKey(Struct):
    index: t.uint8_t
    key: KeyData
    ...


class LinkKey(Struct):
    ieee: t.EUI64
    key: KeyData
    ...


class IndexedEndpoint(Struct):
    index: t.uint8_t
    descriptor: SimpleDescriptor
    ...


class UpdateNeighborAction(t.enum8):
    ADD = ...


NETWORK_PARAMETER_TYPES = ...
class Command(Struct):
    command_id: CommandId
    seq: t.uint8_t
    payload: t.Bytes
    ...


COMMAND_SCHEMAS = ...
class Deconz:
    """deCONZ API class."""
    def __init__(self, app: Callable, device_config: dict[str, Any]) -> None:
        """Init instance."""
        ...
    
    @property
    def firmware_version(self) -> FirmwareVersion:
        """Return ConBee firmware version."""
        ...
    
    @property
    def network_state(self) -> NetworkState:
        """Return current network state."""
        ...
    
    @property
    def protocol_version(self) -> int:
        """Protocol Version."""
        ...
    
    async def connect(self) -> None:
        ...
    
    def connection_lost(self, exc: Exception) -> None:
        """Lost serial connection."""
        ...
    
    def close(self): # -> None:
        ...
    
    async def send_command(self, cmd, **kwargs) -> Any:
        ...
    
    def data_received(self, data: bytes) -> None:
        ...
    
    async def version(self): # -> FirmwareVersion:
        ...
    
    async def read_parameter(self, parameter_id: NetworkParameter, parameter: Any = ...) -> Any:
        ...
    
    async def write_parameter(self, parameter_id: NetworkParameter, parameter: Any) -> None:
        ...
    
    async def aps_data_request(self, req_id, dst_addr_ep, profile, cluster, src_ep, aps_payload, *, relays=..., tx_options=..., radius=...) -> None:
        ...
    
    async def get_device_state(self) -> DeviceState:
        ...
    
    async def change_network_state(self, new_state: NetworkState) -> None:
        ...
    
    async def add_neighbour(self, nwk: t.NWK, ieee: t.EUI64, mac_capability_flags: t.uint8_t) -> None:
        ...
    


