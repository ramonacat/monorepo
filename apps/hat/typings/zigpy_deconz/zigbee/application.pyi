"""
This type stub file was generated by pyright.
"""

import sys
import zigpy.application
import zigpy.device
import zigpy.zdo.types as zdo_t
from typing import Any
from zigpy_deconz import types as t

"""ControllerApplication for deCONZ protocol based adapters."""
if sys.version_info[: 2] < (3, 11):
    ...
else:
    ...
LOGGER = ...
CHANGE_NETWORK_POLL_TIME = ...
CHANGE_NETWORK_STATE_DELAY = ...
DELAY_NEIGHBOUR_SCAN_S = ...
SEND_CONFIRM_TIMEOUT = ...
PROTO_VER_MANUAL_SOURCE_ROUTE = ...
PROTO_VER_WATCHDOG = ...
PROTO_VER_NEIGBOURS = ...
CONBEE_III_ENERGY_SCAN_ATTEMPTS = ...
class ControllerApplication(zigpy.application.ControllerApplication):
    SCHEMA = ...
    _probe_config_variants = ...
    _watchdog_period = ...
    def __init__(self, config: dict[str, Any]) -> None:
        """Initialize instance."""
        ...
    
    async def connect(self): # -> None:
        ...
    
    async def disconnect(self): # -> None:
        ...
    
    async def permit_with_link_key(self, node: t.EUI64, link_key: t.KeyData, time_s=...): # -> None:
        ...
    
    async def start_network(self): # -> None:
        ...
    
    async def reset_network_info(self): # -> None:
        ...
    
    async def write_network_info(self, *, network_info, node_info): # -> None:
        ...
    
    async def load_network_info(self, *, load_devices=...): # -> None:
        ...
    
    async def force_remove(self, dev): # -> None:
        """Forcibly remove device from NCP."""
        ...
    
    async def energy_scan(self, channels: t.Channels.ALL_CHANNELS, duration_exp: int, count: int) -> dict[int, float]:
        ...
    
    async def add_endpoint(self, descriptor: zdo_t.SimpleDescriptor) -> None:
        """Register an endpoint on the device, replacing any with conflicting IDs."""
        ...
    
    async def send_packet(self, packet): # -> None:
        ...
    
    async def permit_ncp(self, time_s=...): # -> None:
        ...
    
    def handle_tx_confirm(self, req_id, status): # -> None:
        ...
    
    async def restore_neighbours(self) -> None:
        """Restore children."""
        ...
    


class DeconzDevice(zigpy.device.Device):
    """Zigpy Device representing Coordinator."""
    def __init__(self, model: str, *args) -> None:
        """Initialize instance."""
        ...
    
    async def add_to_group(self, grp_id: int, name: str = ...) -> None:
        ...
    
    async def remove_from_group(self, grp_id: int) -> None:
        ...
    
    @property
    def manufacturer(self): # -> Literal['dresden elektronik']:
        ...
    
    @property
    def model(self): # -> str | None:
        ...
    
    @classmethod
    async def new(cls, application, ieee, nwk, model: str): # -> Self:
        """Create or replace zigpy device."""
        ...
    


