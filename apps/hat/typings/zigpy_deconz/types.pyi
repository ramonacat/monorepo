"""
This type stub file was generated by pyright.
"""

from zigpy.types import EUI64, LVList, NWK, Struct, bitmap8, enum8, uint8_t

"""Data types module."""
def serialize_dict(data, schema): # -> bytes:
    ...

def deserialize_dict(data, schema): # -> tuple[dict[Any, Any], Any]:
    ...

def list_replace(lst: list, old: object, new: object) -> list:
    """Replace all occurrences of `old` with `new` in `lst`."""
    ...

class Bytes(bytes):
    def serialize(self): # -> Self:
        ...
    
    @classmethod
    def deserialize(cls, data): # -> tuple[Self, Literal[b""]]:
        ...
    


class AddressMode(enum8):
    GROUP = ...
    NWK = ...
    IEEE = ...
    NWK_AND_IEEE = ...


class DeconzSendDataFlags(bitmap8):
    NONE = ...
    NODE_ID = ...
    RELAYS = ...


class DeconzTransmitOptions(bitmap8):
    NONE = ...
    SECURITY_ENABLED = ...
    USE_NWK_KEY_SECURITY = ...
    USE_APS_ACKS = ...
    ALLOW_FRAGMENTATION = ...


class NWKList(LVList):
    _length_type = uint8_t
    _item_type = NWK


ZIGPY_ADDR_MODE_MAPPING = ...
ZIGPY_ADDR_TYPE_MAPPING = ...
ZIGPY_ADDR_MODE_REVERSE_MAPPING = ...
ZIGPY_ADDR_TYPE_REVERSE_MAPPING = ...
class DeconzAddress(Struct):
    address_mode: AddressMode
    address: EUI64
    ieee: EUI64
    @classmethod
    def deserialize(cls, data): # -> tuple[Self, bytes]:
        ...
    
    def serialize(self): # -> bytes:
        ...
    
    def as_zigpy_type(self): # -> AddrModeAddress:
        ...
    
    @classmethod
    def from_zigpy_type(cls, addr): # -> Self:
        ...
    


class DeconzAddressEndpoint(Struct):
    address_mode: AddressMode
    address: EUI64
    ieee: EUI64
    endpoint: uint8_t
    @classmethod
    def deserialize(cls, data): # -> tuple[Any, bytes | Any]:
        ...
    
    def serialize(self): # -> bytes:
        ...
    
    @classmethod
    def from_zigpy_type(cls, addr, endpoint): # -> Self:
        ...
    


class DataIndicationFlags(bitmap8):
    Always_Use_NWK_Source_Addr = ...
    Last_Hop_In_Reserved_Bytes = ...
    Include_Both_NWK_And_IEEE = ...


