Escaped mutants:
================

Timed Out mutants:
==================

Skipped mutants:
================

Not Covered mutants:
====================

1) /home/ramona/Projects/monorepo/apps/ras2/src/Migrations/Version20240801101143.php:22    [M] MethodCallRemoval

@@ @@
     }
     public function up(Schema $schema): void
     {
-        $this->addSql('
-        CREATE TYPE tasks_state AS ENUM(\'IDEA\', \'BACKLOG_ITEM\', \'STARTED\', \'DONE\');
-        ');
+        
         $this->addSql('
         CREATE TABLE tasks (
             id UUID PRIMARY KEY,


2) /home/ramona/Projects/monorepo/apps/ras2/src/Migrations/Version20240801101143.php:25    [M] MethodCallRemoval

@@ @@
         $this->addSql('
         CREATE TYPE tasks_state AS ENUM(\'IDEA\', \'BACKLOG_ITEM\', \'STARTED\', \'DONE\');
         ');
-        $this->addSql('
-        CREATE TABLE tasks (
-            id UUID PRIMARY KEY,
-            category_id UUID NOT NULL,
-            title TEXT NOT NULL,
-            assignee_id UUID,
-            state tasks_state NOT NULL
-        );');
+        
         $this->addSql('
         CREATE TABLE tags (
             id UUID PRIMARY KEY,


3) /home/ramona/Projects/monorepo/apps/ras2/src/Migrations/Version20240801101143.php:34    [M] MethodCallRemoval

@@ @@
             assignee_id UUID,
             state tasks_state NOT NULL
         );');
-        $this->addSql('
-        CREATE TABLE tags (
-            id UUID PRIMARY KEY,
-            name TEXT NOT NULL
-        );
-        ');
+        
         $this->addSql('
         CREATE TABLE tasks_tags (
             task_id UUID NOT NULL REFERENCES tasks(id),


4) /home/ramona/Projects/monorepo/apps/ras2/src/Migrations/Version20240801101143.php:40    [M] MethodCallRemoval

@@ @@
             name TEXT NOT NULL
         );
         ');
-        $this->addSql('
-        CREATE TABLE tasks_tags (
-            task_id UUID NOT NULL REFERENCES tasks(id),
-            tag_id UUID NOT NULL REFERENCES tags(id)
-        );
-        ');
+        
     }
 }


5) /home/ramona/Projects/monorepo/apps/ras2/src/Task/AssigneeNotProvided.php:11    [M] PublicVisibility

@@ @@
 use RuntimeException;
 final class AssigneeNotProvided extends RuntimeException
 {
-    public static function forTask(TaskId $id): self
+    protected static function forTask(TaskId $id): self
     {
         return new self("Assignee was not provided when changing state for task \"{$id}\"");
     }
 }


6) /home/ramona/Projects/monorepo/apps/ras2/src/Task/BacklogItem.php:26    [M] PublicVisibility

@@ @@
     /**
      * @psalm-suppress PossiblyUnusedMethod
      */
-    public function start(?UserId $assignee): Started
+    protected function start(?UserId $assignee): Started
     {
         $assignee = $assignee ?? $this->assignee ?? throw AssigneeNotProvided::forTask($this->description->id());
         return new Started($this->description, $assignee);
     }
 }


7) /home/ramona/Projects/monorepo/apps/ras2/src/Task/BacklogItem.php:28    [M] Throw_

@@ @@
      */
     public function start(?UserId $assignee): Started
     {
-        $assignee = $assignee ?? $this->assignee ?? throw AssigneeNotProvided::forTask($this->description->id());
+        $assignee = $assignee ?? $this->assignee ?? AssigneeNotProvided::forTask($this->description->id());
         return new Started($this->description, $assignee);
     }
 }


8) /home/ramona/Projects/monorepo/apps/ras2/src/Task/BacklogItem.php:28    [M] Coalesce

@@ @@
      */
     public function start(?UserId $assignee): Started
     {
-        $assignee = $assignee ?? $this->assignee ?? throw AssigneeNotProvided::forTask($this->description->id());
+        $assignee = $assignee ?? (throw AssigneeNotProvided::forTask($this->description->id())) ?? $this->assignee;
         return new Started($this->description, $assignee);
     }
 }


9) /home/ramona/Projects/monorepo/apps/ras2/src/Task/BacklogItem.php:28    [M] Coalesce

@@ @@
      */
     public function start(?UserId $assignee): Started
     {
-        $assignee = $assignee ?? $this->assignee ?? throw AssigneeNotProvided::forTask($this->description->id());
+        $assignee = $this->assignee ?? $assignee ?? throw AssigneeNotProvided::forTask($this->description->id());
         return new Started($this->description, $assignee);
     }
 }


10) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Idea.php:21    [M] PublicVisibility

@@ @@
     /**
      * @psalm-suppress PossiblyUnusedMethod
      */
-    public function toBacklog(?UserId $assignee): BacklogItem
+    protected function toBacklog(?UserId $assignee): BacklogItem
     {
         return new BacklogItem($this->description, $assignee);
     }
 }


11) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Query/Executor/AllTasksByCategoryExecutor.php:47    [M] Foreach_

@@ @@
             ')->executeQuery()->fetchAllAssociative();
         /** @var ArrayCollection<string, ArrayCollection<int, TaskSummary>> $result */
         $result = new ArrayCollection();
-        foreach ($allTasks as $rawTask) {
+        foreach ([] as $rawTask) {
             $categoryId = (string) $rawTask['category_id'];
             if (!isset($result[$categoryId])) {
                 $result[$categoryId] = new ArrayCollection();


12) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Query/Executor/AllTasksByCategoryExecutor.php:48    [M] CastString

@@ @@
         /** @var ArrayCollection<string, ArrayCollection<int, TaskSummary>> $result */
         $result = new ArrayCollection();
         foreach ($allTasks as $rawTask) {
-            $categoryId = (string) $rawTask['category_id'];
+            $categoryId = $rawTask['category_id'];
             if (!isset($result[$categoryId])) {
                 $result[$categoryId] = new ArrayCollection();
             }


13) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Query/Executor/AllTasksByCategoryExecutor.php:50    [M] LogicalNot

@@ @@
         $result = new ArrayCollection();
         foreach ($allTasks as $rawTask) {
             $categoryId = (string) $rawTask['category_id'];
-            if (!isset($result[$categoryId])) {
+            if (isset($result[$categoryId])) {
                 $result[$categoryId] = new ArrayCollection();
             }
             /** @var ArrayCollection<int, string> $tagNames */


14) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Query/Executor/AllTasksByCategoryExecutor.php:56    [M] NotIdentical

@@ @@
                 $result[$categoryId] = new ArrayCollection();
             }
             /** @var ArrayCollection<int, string> $tagNames */
-            $tagNames = new ArrayCollection($rawTask['tag_names'] !== null ? array_values(array_map(fn($x) => (string) $x, (array) \Safe\json_decode((string) $rawTask['tag_names'], true))) : []);
+            $tagNames = new ArrayCollection($rawTask['tag_names'] === null ? array_values(array_map(fn($x) => (string) $x, (array) \Safe\json_decode((string) $rawTask['tag_names'], true))) : []);
             $result[$categoryId]?->add(new TaskSummary(TaskId::fromString((string) $rawTask['id']), CategoryId::fromString($categoryId), (string) $rawTask['title'], $rawTask['assignee_id'] === null ? null : UserId::fromString((string) $rawTask['assignee_id']), $tagNames, (string) $rawTask['state']));
         }
         return $result;
     }
 }


15) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Query/Executor/AllTasksByCategoryExecutor.php:56    [M] Ternary

@@ @@
                 $result[$categoryId] = new ArrayCollection();
             }
             /** @var ArrayCollection<int, string> $tagNames */
-            $tagNames = new ArrayCollection($rawTask['tag_names'] !== null ? array_values(array_map(fn($x) => (string) $x, (array) \Safe\json_decode((string) $rawTask['tag_names'], true))) : []);
+            $tagNames = new ArrayCollection($rawTask['tag_names'] !== null ? [] : array_values(array_map(fn($x) => (string) $x, (array) \Safe\json_decode((string) $rawTask['tag_names'], true))));
             $result[$categoryId]?->add(new TaskSummary(TaskId::fromString((string) $rawTask['id']), CategoryId::fromString($categoryId), (string) $rawTask['title'], $rawTask['assignee_id'] === null ? null : UserId::fromString((string) $rawTask['assignee_id']), $tagNames, (string) $rawTask['state']));
         }
         return $result;
     }
 }


16) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Query/Executor/AllTasksByCategoryExecutor.php:57    [M] UnwrapArrayMap

@@ @@
                 $result[$categoryId] = new ArrayCollection();
             }
             /** @var ArrayCollection<int, string> $tagNames */
-            $tagNames = new ArrayCollection($rawTask['tag_names'] !== null ? array_values(array_map(fn($x) => (string) $x, (array) \Safe\json_decode((string) $rawTask['tag_names'], true))) : []);
+            $tagNames = new ArrayCollection($rawTask['tag_names'] !== null ? array_values((array) \Safe\json_decode((string) $rawTask['tag_names'], true)) : []);
             $result[$categoryId]?->add(new TaskSummary(TaskId::fromString((string) $rawTask['id']), CategoryId::fromString($categoryId), (string) $rawTask['title'], $rawTask['assignee_id'] === null ? null : UserId::fromString((string) $rawTask['assignee_id']), $tagNames, (string) $rawTask['state']));
         }
         return $result;
     }
 }


17) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Query/Executor/AllTasksByCategoryExecutor.php:57    [M] UnwrapArrayValues

@@ @@
                 $result[$categoryId] = new ArrayCollection();
             }
             /** @var ArrayCollection<int, string> $tagNames */
-            $tagNames = new ArrayCollection($rawTask['tag_names'] !== null ? array_values(array_map(fn($x) => (string) $x, (array) \Safe\json_decode((string) $rawTask['tag_names'], true))) : []);
+            $tagNames = new ArrayCollection($rawTask['tag_names'] !== null ? array_map(fn($x) => (string) $x, (array) \Safe\json_decode((string) $rawTask['tag_names'], true)) : []);
             $result[$categoryId]?->add(new TaskSummary(TaskId::fromString((string) $rawTask['id']), CategoryId::fromString($categoryId), (string) $rawTask['title'], $rawTask['assignee_id'] === null ? null : UserId::fromString((string) $rawTask['assignee_id']), $tagNames, (string) $rawTask['state']));
         }
         return $result;
     }
 }


18) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Query/Executor/AllTasksByCategoryExecutor.php:58    [M] CastString

@@ @@
                 $result[$categoryId] = new ArrayCollection();
             }
             /** @var ArrayCollection<int, string> $tagNames */
-            $tagNames = new ArrayCollection($rawTask['tag_names'] !== null ? array_values(array_map(fn($x) => (string) $x, (array) \Safe\json_decode((string) $rawTask['tag_names'], true))) : []);
+            $tagNames = new ArrayCollection($rawTask['tag_names'] !== null ? array_values(array_map(fn($x) => $x, (array) \Safe\json_decode((string) $rawTask['tag_names'], true))) : []);
             $result[$categoryId]?->add(new TaskSummary(TaskId::fromString((string) $rawTask['id']), CategoryId::fromString($categoryId), (string) $rawTask['title'], $rawTask['assignee_id'] === null ? null : UserId::fromString((string) $rawTask['assignee_id']), $tagNames, (string) $rawTask['state']));
         }
         return $result;
     }
 }


19) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Query/Executor/AllTasksByCategoryExecutor.php:59    [M] CastString

@@ @@
                 $result[$categoryId] = new ArrayCollection();
             }
             /** @var ArrayCollection<int, string> $tagNames */
-            $tagNames = new ArrayCollection($rawTask['tag_names'] !== null ? array_values(array_map(fn($x) => (string) $x, (array) \Safe\json_decode((string) $rawTask['tag_names'], true))) : []);
+            $tagNames = new ArrayCollection($rawTask['tag_names'] !== null ? array_values(array_map(fn($x) => (string) $x, (array) \Safe\json_decode($rawTask['tag_names'], true))) : []);
             $result[$categoryId]?->add(new TaskSummary(TaskId::fromString((string) $rawTask['id']), CategoryId::fromString($categoryId), (string) $rawTask['title'], $rawTask['assignee_id'] === null ? null : UserId::fromString((string) $rawTask['assignee_id']), $tagNames, (string) $rawTask['state']));
         }
         return $result;
     }
 }


20) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Query/Executor/AllTasksByCategoryExecutor.php:59    [M] CastArray

@@ @@
                 $result[$categoryId] = new ArrayCollection();
             }
             /** @var ArrayCollection<int, string> $tagNames */
-            $tagNames = new ArrayCollection($rawTask['tag_names'] !== null ? array_values(array_map(fn($x) => (string) $x, (array) \Safe\json_decode((string) $rawTask['tag_names'], true))) : []);
+            $tagNames = new ArrayCollection($rawTask['tag_names'] !== null ? array_values(array_map(fn($x) => (string) $x, \Safe\json_decode((string) $rawTask['tag_names'], true))) : []);
             $result[$categoryId]?->add(new TaskSummary(TaskId::fromString((string) $rawTask['id']), CategoryId::fromString($categoryId), (string) $rawTask['title'], $rawTask['assignee_id'] === null ? null : UserId::fromString((string) $rawTask['assignee_id']), $tagNames, (string) $rawTask['state']));
         }
         return $result;
     }
 }


21) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Query/Executor/AllTasksByCategoryExecutor.php:63    [M] NullSafeMethodCall

@@ @@
             }
             /** @var ArrayCollection<int, string> $tagNames */
             $tagNames = new ArrayCollection($rawTask['tag_names'] !== null ? array_values(array_map(fn($x) => (string) $x, (array) \Safe\json_decode((string) $rawTask['tag_names'], true))) : []);
-            $result[$categoryId]?->add(new TaskSummary(TaskId::fromString((string) $rawTask['id']), CategoryId::fromString($categoryId), (string) $rawTask['title'], $rawTask['assignee_id'] === null ? null : UserId::fromString((string) $rawTask['assignee_id']), $tagNames, (string) $rawTask['state']));
+            $result[$categoryId]->add(new TaskSummary(TaskId::fromString((string) $rawTask['id']), CategoryId::fromString($categoryId), (string) $rawTask['title'], $rawTask['assignee_id'] === null ? null : UserId::fromString((string) $rawTask['assignee_id']), $tagNames, (string) $rawTask['state']));
         }
         return $result;
     }
 }


22) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Query/Executor/AllTasksByCategoryExecutor.php:64    [M] CastString

@@ @@
             }
             /** @var ArrayCollection<int, string> $tagNames */
             $tagNames = new ArrayCollection($rawTask['tag_names'] !== null ? array_values(array_map(fn($x) => (string) $x, (array) \Safe\json_decode((string) $rawTask['tag_names'], true))) : []);
-            $result[$categoryId]?->add(new TaskSummary(TaskId::fromString((string) $rawTask['id']), CategoryId::fromString($categoryId), (string) $rawTask['title'], $rawTask['assignee_id'] === null ? null : UserId::fromString((string) $rawTask['assignee_id']), $tagNames, (string) $rawTask['state']));
+            $result[$categoryId]?->add(new TaskSummary(TaskId::fromString($rawTask['id']), CategoryId::fromString($categoryId), (string) $rawTask['title'], $rawTask['assignee_id'] === null ? null : UserId::fromString((string) $rawTask['assignee_id']), $tagNames, (string) $rawTask['state']));
         }
         return $result;
     }
 }


23) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Query/Executor/AllTasksByCategoryExecutor.php:66    [M] CastString

@@ @@
             }
             /** @var ArrayCollection<int, string> $tagNames */
             $tagNames = new ArrayCollection($rawTask['tag_names'] !== null ? array_values(array_map(fn($x) => (string) $x, (array) \Safe\json_decode((string) $rawTask['tag_names'], true))) : []);
-            $result[$categoryId]?->add(new TaskSummary(TaskId::fromString((string) $rawTask['id']), CategoryId::fromString($categoryId), (string) $rawTask['title'], $rawTask['assignee_id'] === null ? null : UserId::fromString((string) $rawTask['assignee_id']), $tagNames, (string) $rawTask['state']));
+            $result[$categoryId]?->add(new TaskSummary(TaskId::fromString((string) $rawTask['id']), CategoryId::fromString($categoryId), $rawTask['title'], $rawTask['assignee_id'] === null ? null : UserId::fromString((string) $rawTask['assignee_id']), $tagNames, (string) $rawTask['state']));
         }
         return $result;
     }
 }


24) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Query/Executor/AllTasksByCategoryExecutor.php:67    [M] Identical

@@ @@
             }
             /** @var ArrayCollection<int, string> $tagNames */
             $tagNames = new ArrayCollection($rawTask['tag_names'] !== null ? array_values(array_map(fn($x) => (string) $x, (array) \Safe\json_decode((string) $rawTask['tag_names'], true))) : []);
-            $result[$categoryId]?->add(new TaskSummary(TaskId::fromString((string) $rawTask['id']), CategoryId::fromString($categoryId), (string) $rawTask['title'], $rawTask['assignee_id'] === null ? null : UserId::fromString((string) $rawTask['assignee_id']), $tagNames, (string) $rawTask['state']));
+            $result[$categoryId]?->add(new TaskSummary(TaskId::fromString((string) $rawTask['id']), CategoryId::fromString($categoryId), (string) $rawTask['title'], $rawTask['assignee_id'] !== null ? null : UserId::fromString((string) $rawTask['assignee_id']), $tagNames, (string) $rawTask['state']));
         }
         return $result;
     }
 }


25) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Query/Executor/AllTasksByCategoryExecutor.php:67    [M] CastString

@@ @@
             }
             /** @var ArrayCollection<int, string> $tagNames */
             $tagNames = new ArrayCollection($rawTask['tag_names'] !== null ? array_values(array_map(fn($x) => (string) $x, (array) \Safe\json_decode((string) $rawTask['tag_names'], true))) : []);
-            $result[$categoryId]?->add(new TaskSummary(TaskId::fromString((string) $rawTask['id']), CategoryId::fromString($categoryId), (string) $rawTask['title'], $rawTask['assignee_id'] === null ? null : UserId::fromString((string) $rawTask['assignee_id']), $tagNames, (string) $rawTask['state']));
+            $result[$categoryId]?->add(new TaskSummary(TaskId::fromString((string) $rawTask['id']), CategoryId::fromString($categoryId), (string) $rawTask['title'], $rawTask['assignee_id'] === null ? null : UserId::fromString($rawTask['assignee_id']), $tagNames, (string) $rawTask['state']));
         }
         return $result;
     }
 }


26) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Query/Executor/AllTasksByCategoryExecutor.php:67    [M] Ternary

@@ @@
             }
             /** @var ArrayCollection<int, string> $tagNames */
             $tagNames = new ArrayCollection($rawTask['tag_names'] !== null ? array_values(array_map(fn($x) => (string) $x, (array) \Safe\json_decode((string) $rawTask['tag_names'], true))) : []);
-            $result[$categoryId]?->add(new TaskSummary(TaskId::fromString((string) $rawTask['id']), CategoryId::fromString($categoryId), (string) $rawTask['title'], $rawTask['assignee_id'] === null ? null : UserId::fromString((string) $rawTask['assignee_id']), $tagNames, (string) $rawTask['state']));
+            $result[$categoryId]?->add(new TaskSummary(TaskId::fromString((string) $rawTask['id']), CategoryId::fromString($categoryId), (string) $rawTask['title'], $rawTask['assignee_id'] === null ? UserId::fromString((string) $rawTask['assignee_id']) : null, $tagNames, (string) $rawTask['state']));
         }
         return $result;
     }
 }


27) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Query/Executor/AllTasksByCategoryExecutor.php:69    [M] CastString

@@ @@
             }
             /** @var ArrayCollection<int, string> $tagNames */
             $tagNames = new ArrayCollection($rawTask['tag_names'] !== null ? array_values(array_map(fn($x) => (string) $x, (array) \Safe\json_decode((string) $rawTask['tag_names'], true))) : []);
-            $result[$categoryId]?->add(new TaskSummary(TaskId::fromString((string) $rawTask['id']), CategoryId::fromString($categoryId), (string) $rawTask['title'], $rawTask['assignee_id'] === null ? null : UserId::fromString((string) $rawTask['assignee_id']), $tagNames, (string) $rawTask['state']));
+            $result[$categoryId]?->add(new TaskSummary(TaskId::fromString((string) $rawTask['id']), CategoryId::fromString($categoryId), (string) $rawTask['title'], $rawTask['assignee_id'] === null ? null : UserId::fromString((string) $rawTask['assignee_id']), $tagNames, $rawTask['state']));
         }
         return $result;
     }
 }


28) /home/ramona/Projects/monorepo/apps/ras2/src/Task/TaskDescription.php:49    [M] PublicVisibility

@@ @@
         $this->title = $title;
         $this->tags = $tags;
     }
-    public function id(): TaskId
+    protected function id(): TaskId
     {
         return $this->id();
     }
 }


29) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Web/ListController.php:33    [M] Foreach_

@@ @@
         $rawTasksByCategory = $this->allTasksByCategoryExecutor->execute(new AllTasksByCategory());
         /** @var ArrayCollection<int, CategoryView> $categories */
         $categories = new ArrayCollection();
-        foreach ($rawTasksByCategory as $categoryId => $rawTasks) {
+        foreach ([] as $categoryId => $rawTasks) {
             $categories[] = new CategoryView(CategoryId::fromString($categoryId), $rawTasks->map(fn(TaskSummary $t) => new TaskCardView($t)));
         }
         $taskListView = new TaskListView($categories);


30) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Web/ListController.php:39    [M] CastString

@@ @@
             $categories[] = new CategoryView(CategoryId::fromString($categoryId), $rawTasks->map(fn(TaskSummary $t) => new TaskCardView($t)));
         }
         $taskListView = new TaskListView($categories);
-        $view = new RootView((string) $taskListView);
+        $view = new RootView($taskListView);
         $response = new Response();
         $response->getBody()->write((string) $view);
         return $response;
     }
 }


31) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Web/ListController.php:42    [M] MethodCallRemoval

@@ @@
         $taskListView = new TaskListView($categories);
         $view = new RootView((string) $taskListView);
         $response = new Response();
-        $response->getBody()->write((string) $view);
+        
         return $response;
     }
 }


32) /home/ramona/Projects/monorepo/apps/ras2/src/Task/Web/ListController.php:43    [M] CastString

@@ @@
         $taskListView = new TaskListView($categories);
         $view = new RootView((string) $taskListView);
         $response = new Response();
-        $response->getBody()->write((string) $view);
+        $response->getBody()->write($view);
         return $response;
     }
 }
